#!/usr/bin/env php
<?php

// Find and initialize Composer
use Psr\Log\LogLevel;
use Resque\Redis as ResqueRedis;
use Resque\Resque;
use Resque\Worker\SchedulerWorker;

$files = array(
    __DIR__ . '/../../vendor/autoload.php',
    __DIR__ . '/../../../autoload.php',
    __DIR__ . '/../../../../autoload.php',
    __DIR__ . '/../vendor/autoload.php',
);

$found = false;
foreach ($files as $file) {
    if (file_exists($file)) {
        require_once $file;
        break;
    }
}

$REDIS_BACKEND = getenv('REDIS_BACKEND');
$REDIS_BACKEND_DB = getenv('REDIS_BACKEND_DB');

if (is_string($REDIS_BACKEND) && trim($REDIS_BACKEND) !== '') {
    if (!is_string($REDIS_BACKEND_DB) || trim($REDIS_BACKEND_DB) === '') {
        Resque::setBackend($REDIS_BACKEND);
    } else {
        Resque::setBackend($REDIS_BACKEND, (int)$REDIS_BACKEND_DB);
    }
}

// Set log level for resque-scheduler
$logLevel = 0;
$LOGGING = getenv('LOGGING');
$VERBOSE = getenv('VERBOSE');
$VVERBOSE = getenv('VVERBOSE');

if (is_string($LOGGING) && trim($LOGGING) !== '' || is_string($VERBOSE) && trim($VERBOSE) !== '') {
    $logLevel = SchedulerWorker::LOG_NORMAL;
} elseif (is_string($VVERBOSE) && trim($VVERBOSE) !== '') {
    $logLevel = SchedulerWorker::LOG_VERBOSE;
}

// Check for jobs every $interval seconds
$interval = 5;
$INTERVAL = getenv('INTERVAL');

if (is_string($INTERVAL) && trim($INTERVAL) !== '') {
    $interval = (int)$INTERVAL;
}

// Load the user's application if one exists
$APP_INCLUDE = getenv('APP_INCLUDE');

if (is_string($APP_INCLUDE) && trim($APP_INCLUDE) !== '') {
    if(!file_exists($APP_INCLUDE)) {
        die('APP_INCLUDE (' . $APP_INCLUDE . ") does not exist.\n");
    }

    require_once $APP_INCLUDE;
}

$PREFIX = getenv('PREFIX');

if (is_string($PREFIX) && trim($PREFIX) !== '') {
    fwrite(STDOUT, '*** Prefix set to ' . $PREFIX . "\n");
    ResqueRedis::prefix($PREFIX);
}

$worker = new SchedulerWorker();
$worker->logLevel = $logLevel;

$PIDFILE = getenv('PIDFILE');

if (is_string($PIDFILE) && trim($PIDFILE) !== '') {
    if (file_put_contents($PIDFILE, getmypid()) === false) {
        die('Could not write PID information to ' . $PIDFILE);
    }
}

fwrite(STDOUT, "*** Starting scheduler worker\n");
$worker->work($interval);
